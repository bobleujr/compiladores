/* Generated By:JavaCC: Do not edit this line. JavaParserConstants.java */
package org.visualg.jccparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 9;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int ALEATORIO = 12;
  /** RegularExpression Id. */
  int ALGORITMO = 13;
  /** RegularExpression Id. */
  int ARQUIVO = 14;
  /** RegularExpression Id. */
  int ASC = 15;
  /** RegularExpression Id. */
  int ATE = 16;
  /** RegularExpression Id. */
  int CARAC = 17;
  /** RegularExpression Id. */
  int CARACPNUM = 18;
  /** RegularExpression Id. */
  int CARACTERE = 19;
  /** RegularExpression Id. */
  int CASO = 20;
  /** RegularExpression Id. */
  int COMPR = 21;
  /** RegularExpression Id. */
  int COPIA = 22;
  /** RegularExpression Id. */
  int CRONOMETRO = 23;
  /** RegularExpression Id. */
  int DEBUG = 24;
  /** RegularExpression Id. */
  int E = 25;
  /** RegularExpression Id. */
  int ECO = 26;
  /** RegularExpression Id. */
  int ENQUANTO = 27;
  /** RegularExpression Id. */
  int ENTAO = 28;
  /** RegularExpression Id. */
  int ESCOLHA = 29;
  /** RegularExpression Id. */
  int ESCREVA = 30;
  /** RegularExpression Id. */
  int ESCREVAL = 31;
  /** RegularExpression Id. */
  int FACA = 32;
  /** RegularExpression Id. */
  int FALSO = 33;
  /** RegularExpression Id. */
  int FIMALGORITMO = 34;
  /** RegularExpression Id. */
  int FIMENQUANTO = 35;
  /** RegularExpression Id. */
  int FIMESCOLHA = 36;
  /** RegularExpression Id. */
  int FIMFUNCAO = 37;
  /** RegularExpression Id. */
  int FIMPARA = 38;
  /** RegularExpression Id. */
  int FIMPROCEDIMENT = 39;
  /** RegularExpression Id. */
  int FIMREPITA = 40;
  /** RegularExpression Id. */
  int FIMSE = 41;
  /** RegularExpression Id. */
  int FUNCAO = 42;
  /** RegularExpression Id. */
  int INICIO = 43;
  /** RegularExpression Id. */
  int INT = 44;
  /** RegularExpression Id. */
  int INTEIRO = 45;
  /** RegularExpression Id. */
  int INTERROMPA = 46;
  /** RegularExpression Id. */
  int LEIA = 47;
  /** RegularExpression Id. */
  int LIMPATELA = 48;
  /** RegularExpression Id. */
  int LOGICO = 49;
  /** RegularExpression Id. */
  int MAIUSC = 50;
  /** RegularExpression Id. */
  int MINUSC = 51;
  /** RegularExpression Id. */
  int MOD = 52;
  /** RegularExpression Id. */
  int NAO = 53;
  /** RegularExpression Id. */
  int NUMPCARAC = 54;
  /** RegularExpression Id. */
  int OU = 55;
  /** RegularExpression Id. */
  int OUTROCASO = 56;
  /** RegularExpression Id. */
  int PARA = 57;
  /** RegularExpression Id. */
  int PASSO = 58;
  /** RegularExpression Id. */
  int PAUSA = 59;
  /** RegularExpression Id. */
  int POS = 60;
  /** RegularExpression Id. */
  int REAL = 61;
  /** RegularExpression Id. */
  int PROCEDIMENTO = 62;
  /** RegularExpression Id. */
  int REPITA = 63;
  /** RegularExpression Id. */
  int RETORNE = 64;
  /** RegularExpression Id. */
  int SE = 65;
  /** RegularExpression Id. */
  int SENAO = 66;
  /** RegularExpression Id. */
  int TIMER = 67;
  /** RegularExpression Id. */
  int VAR = 68;
  /** RegularExpression Id. */
  int VETOR = 69;
  /** RegularExpression Id. */
  int VERDADEIRO = 70;
  /** RegularExpression Id. */
  int XOU = 71;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 72;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 73;
  /** RegularExpression Id. */
  int HEX_LITERAL = 74;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 75;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 76;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 77;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 78;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 79;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 80;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 81;
  /** RegularExpression Id. */
  int STRING_LITERAL = 82;
  /** RegularExpression Id. */
  int IDENTIFIER = 83;
  /** RegularExpression Id. */
  int LETTER = 84;
  /** RegularExpression Id. */
  int PART_LETTER = 85;
  /** RegularExpression Id. */
  int LPAREN = 86;
  /** RegularExpression Id. */
  int RPAREN = 87;
  /** RegularExpression Id. */
  int LBRACE = 88;
  /** RegularExpression Id. */
  int RBRACE = 89;
  /** RegularExpression Id. */
  int LBRACKET = 90;
  /** RegularExpression Id. */
  int RBRACKET = 91;
  /** RegularExpression Id. */
  int SEMICOLON = 92;
  /** RegularExpression Id. */
  int COMMA = 93;
  /** RegularExpression Id. */
  int DOT = 94;
  /** RegularExpression Id. */
  int AT = 95;
  /** RegularExpression Id. */
  int ASSIGN = 96;
  /** RegularExpression Id. */
  int LT = 97;
  /** RegularExpression Id. */
  int BANG = 98;
  /** RegularExpression Id. */
  int TILDE = 99;
  /** RegularExpression Id. */
  int HOOK = 100;
  /** RegularExpression Id. */
  int COLON = 101;
  /** RegularExpression Id. */
  int EQ = 102;
  /** RegularExpression Id. */
  int LE = 103;
  /** RegularExpression Id. */
  int GE = 104;
  /** RegularExpression Id. */
  int NE = 105;
  /** RegularExpression Id. */
  int SC_OR = 106;
  /** RegularExpression Id. */
  int SC_AND = 107;
  /** RegularExpression Id. */
  int INCR = 108;
  /** RegularExpression Id. */
  int DECR = 109;
  /** RegularExpression Id. */
  int PLUS = 110;
  /** RegularExpression Id. */
  int MINUS = 111;
  /** RegularExpression Id. */
  int STAR = 112;
  /** RegularExpression Id. */
  int SLASH = 113;
  /** RegularExpression Id. */
  int BIT_AND = 114;
  /** RegularExpression Id. */
  int BIT_OR = 115;
  /** RegularExpression Id. */
  int XOR = 116;
  /** RegularExpression Id. */
  int REM = 117;
  /** RegularExpression Id. */
  int LSHIFT = 118;
  /** RegularExpression Id. */
  int PLUSASSIGN = 119;
  /** RegularExpression Id. */
  int MINUSASSIGN = 120;
  /** RegularExpression Id. */
  int STARASSIGN = 121;
  /** RegularExpression Id. */
  int SLASHASSIGN = 122;
  /** RegularExpression Id. */
  int ANDASSIGN = 123;
  /** RegularExpression Id. */
  int ORASSIGN = 124;
  /** RegularExpression Id. */
  int XORASSIGN = 125;
  /** RegularExpression Id. */
  int REMASSIGN = 126;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 127;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 128;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 129;
  /** RegularExpression Id. */
  int ELLIPSIS = 130;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 131;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 132;
  /** RegularExpression Id. */
  int GT = 133;
  /** RegularExpression Id. */
  int STUFF_TO_IGNORE = 135;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 11>",
    "\"aleatorio\"",
    "\"algoritmo\"",
    "\"arquivo\"",
    "\"asc\"",
    "\"ate\"",
    "\"carac\"",
    "\"caracpnum\"",
    "\"caractere\"",
    "\"caso\"",
    "\"compr\"",
    "\"copia\"",
    "\"cronometro\"",
    "\"debug\"",
    "\"e\"",
    "\"eco\"",
    "\"enquanto\"",
    "\"entao\"",
    "\"escolha\"",
    "\"escreva\"",
    "\"escreval\"",
    "\"faca\"",
    "\"falso\"",
    "\"fimalgoritmo\"",
    "\"fimenquanto\"",
    "\"fimescolha\"",
    "\"fimfuncao\"",
    "\"\\tfimpara\"",
    "\"fimprocedimento\"",
    "\"fimrepita\"",
    "\"fimse\"",
    "\"funcao\"",
    "\"inicio\"",
    "\"int\"",
    "\"inteiro\"",
    "\"interrompa\"",
    "\"\\tleia\"",
    "\"limpatela\"",
    "\"logico\"",
    "\"maiusc\"",
    "\"minusc\"",
    "\"mod\"",
    "\"nao\"",
    "\"numpcarac\"",
    "\"ou\"",
    "\"outrocaso\"",
    "\"\\tpara\"",
    "\"passo\"",
    "\"pausa\"",
    "\"pos\"",
    "\"real\"",
    "\"procedimento\"",
    "\"repita\"",
    "\"retorne\"",
    "\"se\"",
    "\"senao\"",
    "\"timer\"",
    "\"var\"",
    "\"vetor\"",
    "\"verdadeiro\"",
    "\"xou\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\"\\u001a\"",
    "<STUFF_TO_IGNORE>",
    "\"\\\"\"",
    "\"<-\"",
    "\"INTEIRO\"",
    "\"REAL\"",
    "\"L\\u00c3\\u201cGICO\"",
    "\"TEXTO\"",
    "\"CARACTERE\"",
  };

}
