/* Generated By:JavaCC: Do not edit this line. JavaParser.java */
package org.visualg.jccparser;

import java.io.*;
import java.util.*;

/**
 * Grammar to parse Java version 1.5
 *
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class JavaParser implements JavaParserConstants {

    public List<ParseException> syntaxErrors = new ArrayList<ParseException>();

    void recover(ParseException ex, int recoveryPoint) {
        syntaxErrors.add(ex);
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != EOF && t.kind != recoveryPoint);
    }

    public JavaParser(String fileName) {
        this(System.in);
        try {
            ReInit(new FileInputStream(new File(fileName)));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String args[]) {
        JavaParser parser;
        if (args.length == 0) {
            System.out.println("Java Parser Version 1.1:  Reading from standard input . . .");
            parser = new JavaParser(System.in);
        } else if (args.length == 1) {
            System.out.println("Java Parser Version 1.1:  Reading from file " + args[0] + " . . .");
            try {
                parser = new JavaParser(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.out.println("Java Parser Version 1.1:  File " + args[0] + " not found.");
                return;
            }
        } else {
            System.out.println("Java Parser Version 1.1:  Usage is one of:");
            System.out.println("         java JavaParser < inputfile");
            System.out.println("OR");
            System.out.println("         java JavaParser inputfile");
            return;
        }
        try {
            parser.CompilationUnit();
            System.out.println("Java Parser Version 1.1:  Java program parsed successfully.");
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("Java Parser Version 1.1:  Encountered errors during parse.");
        }
    }

    /**
     * ***************************************
     * THE VISUALG LANGUAGE GRAMMAR STARTS HERE *
 ****************************************
     */

    /*
 * Program structuring syntax follows.
     */
    final public void CompilationUnit() throws ParseException {
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ALGORITMO:
        ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            NomeAlgoritmo();
        }
        label_2:
        while (true) {
            DeclararVariaveis();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VAR:
        ;
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_2;
            }
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 134:
                jj_consume_token(134);
                break;
            default:
                jj_la1[2] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case STUFF_TO_IGNORE:
                jj_consume_token(STUFF_TO_IGNORE);
                break;
            default:
                jj_la1[3] = jj_gen;
                ;
        }
        jj_consume_token(0);
    }

    final public void NomeAlgoritmo() throws ParseException {
        jj_consume_token(ALGORITMO);
        jj_consume_token(136);
        Name();
        jj_consume_token(136);
    }

    final public void DeclararVariaveis() throws ParseException {
        jj_consume_token(VAR);
        NameList();
        jj_consume_token(COLON);
        Type();
    }

    final public void FieldDeclaration(int modifiers) throws ParseException {
        Type();
        VariableDeclarator();
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
        ;
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    break label_3;
            }
            jj_consume_token(COMMA);
            VariableDeclarator();
        }
        jj_consume_token(COLON);
    }

    final public void VariableDeclarator() throws ParseException {
        VariableDeclaratorId();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 137:
                jj_consume_token(137);
                VariableDeclaratorId();
                break;
            default:
                jj_la1[5] = jj_gen;
                ;
        }
    }

    final public void VariableDeclaratorId() throws ParseException {
        jj_consume_token(IDENTIFIER);
    }

    /*
 * Type, name and expression syntax follows.
     */
    final public void Type() throws ParseException {
        PrimitiveType();
    }

    final public void PrimitiveType() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 138:
                jj_consume_token(138);
                break;
            case 139:
                jj_consume_token(139);
                break;
            case 140:
                jj_consume_token(140);
                break;
            case 141:
                jj_consume_token(141);
                break;
            case 142:
                jj_consume_token(142);
                break;
            default:
                jj_la1[6] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Name() throws ParseException {
        jj_consume_token(IDENTIFIER);
    }

    final public void NameList() throws ParseException {
        Name();
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
        ;
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    break label_4;
            }
            jj_consume_token(COMMA);
            Name();
        }
    }

    /**
     * Generated Token Manager.
     */
    public JavaParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[8];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;
    static private int[] jj_la1_4;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
        jj_la1_init_4();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x2000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x0, 0x10, 0x0, 0x0, 0x20000000, 0x0, 0x0, 0x20000000,};
    }

    private static void jj_la1_init_3() {
        jj_la1_3 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    }

    private static void jj_la1_init_4() {
        jj_la1_4 = new int[]{0x0, 0x0, 0x40, 0x80, 0x0, 0x200, 0x7c00, 0x0,};
    }

    /**
     * Constructor with InputStream.
     */
    public JavaParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public JavaParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new JavaParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor.
     */
    public JavaParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new JavaParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public JavaParser(JavaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(JavaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 8; i++) {
            jj_la1[i] = -1;
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[143];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 8; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                    if ((jj_la1_4[i] & (1 << j)) != 0) {
                        la1tokens[128 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 143; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

}
