/*************************************************************************
Arquivo a ser processado pelo programa JavaCC.
Contém:
       - descrição do analisador léxico para a linguagem X++ 
       - descrição do analisador sintático para a linguagem X++

Autor: Marcio Delamaro
Este programa é parte do livro "Construção de compiladores usando ferra..."
************************************************************************/
options {
  STATIC = false;
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(langX)
package parser;
import java.io.*;
 

public class langX {
final static String Version = "X++ Compiler - Version 1.0 - 2004";
int contParseError = 0;           // contador de erros sintáticos


// Define o método "main" da classe langX.  
  public  static void main(String args[]) throws ParseException 
  {
  boolean debug = false;

    String filename = ""; // nome do arquivo a ser analisado
    langX parser;     // analisador léxico/sintático
    int i;
    boolean ms = false;

    System.out.println(Version);
    // lê os parâmetros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
    if (args[i].equals("-debug_AS") )
            debug = true;
    else
        {
            System.out.println("Usage is: java langX [-debug_AS] inputfile");
            System.exit(0);
        }
    }

    if (args[i].equals("-"))
    {       // lê da entrada padrão      
        System.out.println("Reading from standard input . . .");
        parser = new langX(System.in); // cria AS
     }
     else 
    {       // lê do arquivo
        filename = args[args.length-1];  
        System.out.println("Reading from file " + filename + " . . .");
        try {  // cria AS
            parser = new langX(new java.io.FileInputStream(filename));
        } 
    catch (java.io.FileNotFoundException e) {
               System.out.println("File " + filename + " not found.");
        return;
        }
    } 

    if (! debug) parser.disable_tracing(); // desabilita verbose do AS

    try {
        parser.program();   // chama o método que faz a análise
    }
    catch (ParseException e)
    {
    System.err.println(e.getMessage());
    parser.contParseError = 1;   // não existe recuperação de erros
    }
    finally {
        System.out.println(parser.token_source.foundLexError() +
                                " Lexical Errors found");
        System.out.println(parser.contParseError + " Syntactic Errors found");
     }

}  // main

static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}

}  // langX

PARSER_END(langX)

TOKEN_MGR_DECLS :
{
int countLexError = 0;

public int foundLexError()
{
   return countLexError;
}

}


/* Espacos a serem desprezados no inicio de cada token */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

<singlelinecomment> SKIP:
{
   <["\n","\r"]> : DEFAULT
|   <~[]>
}


/* Palavras reservadas */

TOKEN :
{
  < ALEATORIO	:	"aleatorio">
|< ALGORITMO	:	"algoritmo">
|< ARQUIVO:"arquivo">
|< ASC:"asc">
|< ATE:"ate">
|< CARAC:"carac">
|< CARACPNUM:"caracpnum">
|< CARACTERE:"caractere">
|< CASO:"caso">
|< COMPR:"compr">
|< COPIA:"copia">
|< CRONOMETRO:"cronometro">
|< DE:"de">
|< DEBUG:"debug">
|< ECO:"eco">
|< ENQUANTO:"enquanto">
|< ENTAO:"entao">
|< ESCOLHA:"escolha">
|< ESCREVA:"escreva">
|< ESCREVAL:"escreval">
|< FACA:"faca">
|< FALSO:"falso">
|< FIMALGORITMO:"fimalgoritmo">
|< FIMENQUANTO:"fimenquanto">
|< FIMESCOLHA:"fimescolha">
|< FIMFUNCAO:"fimfuncao">
|< FIMPARA:"fimpara">
|< FIMPROCEDIMENT:"fimprocedimento">
|< FIMREPITA:"fimrepita">
|< FIMSE:"fimse">
|< FUNCAO:"funcao">
|< INICIO:"inicio">
|< INT:"int">
|< INTEIRO:"inteiro">
|< INTERROMPA:"interrompa">
|< LEIA:"leia">
|< LIMPATELA:"limpatela">
|< LOGICO:"logico">
|< MAIUSC:"maiusc">
|< MINUSC:"minusc">
|< MOD:"mod">
|< NUMPCARAC:"numpcarac">
|< OUTROCASO:"outrocaso">
|< PARA:"para">
|< PASSO:"passo">
|< PAUSA:"pausa">
|< POS:"pos">
|< REAL:"real">
|< PROCEDIMENTO:"procedimento">
|< REPITA:"repita">
|< RETORNE:"retorne">
|< SE:"se">
|< SENAO:"senao">
|< TIMER:"timer">
|< VAR:"var">
|< VETOR:"vetor">
|< VERDADEIRO:"verdadeiro">
| < NAO: "nao" >
| < OU: "ou" >
| < E: "e" >
| < XOU: "xou" >
}

/* constantes */

TOKEN :
{
  < int_constant:(  // números decimais, octais, hexadecimais ou binários
                  (["0"-"9"] (["0"-"9"])* ) | 
                  (["0"-"7"] (["0"-"7"])* ["o", "O"] ) |
                  (["0"-"9"] (["0"-"7","A"-"F","a"-"f"])* ["h", "H"] ) |
                  (["0"-"1"] (["0"-"1"])* ["b", "B"])
                 ) >
|
  < string_constant:    // constante string como "abcd bcda"
      "\""( ~["\"","\n","\r"])* "\"" >
|
  < null_constant: "null" > // constante null
|
  < real_constant:
        (["0"-"9"])+ "." (["0"-"9"])*
  >
}

/* Identificadores */

TOKEN :
{
  < IDENT: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:["A"-"Z","a"-"z"] >
|
  < #DIGIT:["0"-"9"] >
}

/* Simbolos especiais */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < COLON: ":" >
}

/* Operadores */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NEQ: "!=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
| < RECEBE: "<-" >
}

/* Trata os erros léxicos */
SPECIAL_TOKEN :
{
<INVALID_LEXICAL: 
(~ ["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  " ",
  "\t",
  "\n",
  "\r",
  "\f"
])+>
   {
    System.err.println("Line " + input_stream.getEndLine() + 
                           " - Invalid string found: " + image);
    countLexError++;
   }
|
   <INVALID_CONST: 
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Line " + input_stream.getEndLine() + 
                           " - String constant has a \\n: " + image);
    countLexError++;
   }

}




void program() :
{
}
{
  [ algoritmo() ] <EOF>
}

void algoritmo(): 
{
}
{
   <ALGORITMO> <string_constant>
		<VAR>
		([var_ident()]<COLON> [tipos()])*
		<INICIO>
		(statement())*
		<FIMALGORITMO>
}

void var_ident() :
{
}
{
    <IDENT> (<COMMA> <IDENT>)*
}


void tipos() :
{
}
{
    (<CARACTERE> | <INTEIRO> | <REAL> | <LOGICO>)
}




void statement():
{
}
{
	escrevastat()
|	leiastat()
|	atribstat()
|	funcstat()
| sestat()
| parastat()
| senaostat()
| enquantostat()
| fimsestat()
| fimenquantostat()
| fimparastat()

// TODO... Declaracao de funcoes...
// TODO... verificar outras funcoes do visualg e seus parametros...

}

void funcstat():
{
}
{
    <ESCREVAL> | <ALEATORIO> | <ARQUIVO> | <COPIA> // Verificar todas funcoes e suas necessidades...
}

void leiastat():
{
}
{
    <LEIA> <LPAREN> expression() <RPAREN>
}


void escrevastat():
{
}
{
    <ESCREVA><LPAREN> expression() <RPAREN>
}

void atribstat():
{
}
{
    lvalue() <RECEBE> (expression())
}

void sestat():
{
}
{
    <SE> (<IDENT> | <int_constant>) comparator() (<IDENT> | <int_constant>) (conditional() (<IDENT> | <int_constant>) comparator() (<IDENT> | <int_constant>))*  <ENTAO>
}

void senaostat():
{
}
{
    <SENAO> expression()
}

void fimsestat():
{
}
{
    <FIMSE>
}

void parastat():
{
}
{
  <PARA> <IDENT> <DE> (<IDENT> | <int_constant>) <ATE> (<IDENT> | <int_constant>) (<PASSO> (<MINUS>)? (<IDENT> | <int_constant>))? <FACA>
}

void fimparastat():
{
}
{
    <FIMPARA>
}

void enquantostat():
{
}
{
  <ENQUANTO> (<IDENT> | <int_constant>) comparator() (<IDENT> | <int_constant>) (conditional() (<IDENT> | <int_constant>) comparator() (<IDENT> | <int_constant>))*  <FACA>
  
}

void fimenquantostat():
{
}
{
    <FIMENQUANTO>
}

void expression() :
{
}
{
    numexpr() [comparator() numexpr()]
}

void comparator():
{
}
{
  ( <LT> | <GT> | <LE> | <GE> | <EQ> | <NEQ>)
}

void numexpr():
{
}
{
    term() ((<PLUS> | <MINUS>) term())*
}

void term():
{
}
{
    unaryexpr() ((<STAR> | <SLASH>| <REM> | <E> | <OU> | <XOU>) unaryexpr())*
}

void unaryexpr() :
{
}
{
   [(<PLUS> | <MINUS>) | <NAO>] factor()
}

void factor():
{
}
{

    
    ( 
       <int_constant> | 
       <string_constant> | 
       <null_constant> |
       lvalue() |
	   <real_constant> |
       <LPAREN> expression() <RPAREN>)
}


void lvalue() :
{
}
{
   <IDENT> (
           <LBRACKET> expression() <RBRACKET> |
           <DOT> <IDENT> [<LPAREN> arglist() <RPAREN>]
         )*
}
void arglist():
{
}
{
    [expression() (<COMMA> expression())*]
}

void conditional():
{
}
{
  (<OU> | <E> | <XOU>)
}